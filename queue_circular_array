//Queue - Circular Array implementation in C++

#include<iostream>
using namespace std;
#define MAX_SIZE 5  //maximum size of the array that will store Queue.

// Creating a class named Queue.
class Queue {

  private:
  	int A[MAX_SIZE];
  	int front, rear;

  public:
  	Queue() { // Constructor - set front and rear as -1 meaning start with an empty queue
  		front = -1;
  		rear = -1;
  	}

  	bool IsEmpty() {
  		return (front == -1 && rear == -1);
  	}

  	bool IsFull() { // To check whether Queue is full or not
  		return (rear+1)%MAX_SIZE == front; // the array element next to the rear is the same element of the front, that means the array is full

  	}

  	void Enqueue(int x) { // Inserts an element in queue at rear end
  		cout<<"Enqueuing "<<x<<" \n";

  		if(IsFull()) {
  		  cout<<"Error: Queue is Full\n";
  			return;
  		}
  		if (IsEmpty()) {
  			front = rear = 0;
  		} else {
  		  rear = (rear+1)%MAX_SIZE; //the next element to the old rear, the modulo didn't yield any new number
  		}

  		A[rear] = x;
  	}

  	void Dequeue() { // Removes an element in Queue from front end.
  		cout<<"Dequeuing \n";
  		if(IsEmpty()) {
  			cout<<"Error: Queue is Empty\n";
  			return;
  		} else if(front == rear ) {
  			rear = front = -1; // the element was only one, Dequeuing will empty the queue
  		} else {
  			front = (front+1)%MAX_SIZE; // front goes up to the next element
  		}
  	}

  	int Front() { // Returns element at front of queue.
  		if(front == -1) {
  			cout<<"Error: cannot return front from empty queue\n";
  			return -1;
  		}
  		return A[front];
  	}
  	/*
  	   Printing the elements in queue from front to rear.
  	   This function is only to test the code.
  	   This is not a standard function for Queue implementation.
  	*/
  	void Print()
  	{
  		// Finding number of elements in queue
  		int count = (rear+MAX_SIZE-front)%MAX_SIZE + 1;
  		cout<<"Queue       : ";
  		for(int i = 0; i <count; i++)
  		{
  			int index = (front+i) % MAX_SIZE; // Index of element while travesing circularly from the front
  			cout<<A[index]<<" ";
  		}
  		cout<<"\n\n";
  	}
  };

int main()
{
	/*Driver Code to test the implementation
	  Printing the elements in Queue after each Enqueue or Dequeue
	*/
   Queue Q; // creating an instance of Queue.
   Q.Enqueue(3);  Q.Print();
   Q.Enqueue(5);  Q.Print();
   Q.Enqueue(9);  Q.Print();
   Q.Dequeue();	  Q.Print();
   Q.Enqueue(13);  Q.Print();
   Q.Enqueue(65);  Q.Print();
   Q.Enqueue(100);  Q.Print(); // output is 5 9 13 65 100
   Q.Enqueue(7);  Q.Print(); // output will be Error: Queue is full because the array has reached its max size and Queue will be printed as it was : 5 9 13 65 100
}
