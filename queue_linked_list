// Queue - Linked List implementation

#include<stdio.h>
#include<stdlib.h>

struct Node {
	int data;
	struct Node* next;
};

// Two global variables to store address of front and rear nodes.
struct Node* front = NULL;
struct Node* rear = NULL;

void Enqueue(int x) { // To insert an interget into the queue
	struct Node* temp = new Node(); // create a node in the heap
	temp->data =x;
	temp->next = NULL;

	if(front == NULL && rear == NULL){ // if the linked list is empty
		front = rear = temp; //make front and rear to point to the same address (temp)
		return;
	}
	rear->next = temp;
	rear = temp;
}

void Dequeue() { // To remove an integer from the queue
	struct Node* temp = front; // create a temp pointer variable storing the address of front, because we need another pointer to point to the first node that we are going to dequeue, while the front pointer will be pointing at the next node

	if(front == NULL) {
		printf("Queue is Empty\n");
		return;
	}
	if(front == rear) {
		front = rear = NULL;
	}
	else {
		front = front->next; // this is where the front pointer points at the second node
	}
	free(temp); // we still have to remove the temp from the heap, that points to the what once was the first node, but later dequeued
}

int Front() { // to peek into the queue and see what's on the first node
	if(front == NULL) {
		printf("Queue is empty\n");
		return -1;
	}
	return front->data; // showing you the value
}

void Print() {
	struct Node* temp = front; // create a temp pointer variable pointing at the same address that front points at
	while(temp != NULL) { // traversing using temp pointer
		printf("%d ",temp->data);
		temp = temp->next;
	}
	printf("\n");
}

// Test it

int main(){
	Enqueue(12); Print();
	Enqueue(9); Print();
	Enqueue(5); Print(); // output 12 9 5
	Dequeue();  Print(); // taking out the node at head
	Enqueue(80); Print(); // output 9 5 80
}
