// Doubly linked list : Insert, Print and Reverse function

#include <stdio.h>
#include <stdlib.h>

struct Node {
  int data;
  struct Node* next;
  struct Node* prev;
};

struct Node* head;

struct Node* getNewNode(int x) {
  Node* newNode = new Node();
  newNode->data = x;
  newNode->prev = NULL;
  newNode->next = NULL;
}

void insertAtHead(int x) {
  struct Node* newNode = getNewNode(x);
  if(head == NULL) {
    head = newNode;
    return;
  }
  head->prev = newNode;
  newNode->next = head;
  head = newNode;
}

void print() {
  struct Node* temp = head;
  printf("Forward: ");
  while(temp != NULL){
    printf("%d ", temp->data);
    temp = temp->next;
  }
  printf("\n");
}

void reversePrint() {
  struct Node* temp = head;
  if(temp==NULL) return; //empty list, exit
  while(temp->next != NULL) { //going to the last node
    temp = temp->next;
  }
  //traversing backward using prev pointer
  printf("Reverse: ");
  while(temp != NULL) {
    printf("%d ", temp->data);
    temp = temp->prev;
  }
  printf("\n");
}

int main(){
  head = NULL;
  insertAtHead(2);
  insertAtHead(4);
  print(); //output 2,4
  reversePrint(); //output 4,2
}
