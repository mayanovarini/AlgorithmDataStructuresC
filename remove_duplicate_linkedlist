/* Program to remove duplicates in an unsorted linked list */

#include<stdio.h>
#include<stdlib.h>

/* A linked list node */
struct node {
  int data;
  struct node *next;
};

/* Function to remove duplicates from an unsorted linked list */
void removeDuplicates(struct node *head) {
  struct node *ptr1, *ptr2, *dup;
  ptr1 = head;

  /* Pick elements one by one */
  while(ptr1 != NULL && ptr1->next != NULL) {
  	ptr2 = ptr1; //pointing at the same address

  	/* Compare the picked element pointed by ptr1 with rest of the elements iterated through by ptr2 */
  	while(ptr2->next != NULL) {
    	/* If duplicate then delete it */
    	if(ptr1->data == ptr2->next->data) {
    		/* sequence of steps is important here */
    		dup = ptr2->next;
    		ptr2->next = ptr2->next->next;
    		free(dup);
    	}
    	else { //when nothing to remove, ptr2 moves on to the next node
    		ptr2 = ptr2->next;
    	}
  	}
  	ptr1 = ptr1->next; //ptr1 moves on to the next node and repeat comparison using ptr2 all over again
  }
}

/* UTILITY FUNCTIONS */

/* Function to push a node */
void push(struct node** head_ref, int new_data) {
  /* allocate node in the heap */
  struct node* new_node = new node();

  /* put in the data */
  new_node->data = new_data;

  /* link the old list off the new node */
  new_node->next = *head_ref;

  /* move the head to point to the new node */
  *head_ref = new_node;
}

/* Function to print nodes in a given linked list */
void printList(struct node *node) {
  while(node != NULL) {
  	printf("%d ", node->data);
  	node = node->next;
  }
}

/* Driver program to test above function */
int main() {
  struct node *head = NULL;
  push(&head, 1);
  push(&head, 1);
  push(&head, 4);
  push(&head, 7);
  push(&head, 4);
  push(&head, 17);
  push(&head, 5);

  printf("\n Linked list before removing duplicates ");
  printList(head);

  removeDuplicates(head);

  printf("\n Linked list after removing duplicates ");
  printList(head);
}
